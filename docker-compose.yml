services:
  discovery-server:
    image: 90jer/discovery-server:latest
    #container_name: discovery-server
    pull_policy: always
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - ./discovery-server/src/main/resources/application-docker.yml:/application-docker.yml

  api-gateway:
    image: 90jer/api-gateway:latest
    #container_name: api-gateway
    pull_policy: always
    ports:
      - "8080:8080"
    depends_on:
      - discovery-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
    volumes:
      - ./api-gateway/src/main/resources/application-docker.yml:/application-docker.yml

  notification-service:
    image: 90jer/notification-service:latest
    #container_name: notification-service
    pull_policy: always
    ports:
      - "8085:8085"
    depends_on:
      - discovery-server
      - kafka
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - ./notification-service/src/main/resources/application-docker.yml:/application-docker.yml

  booking-service:
    image: 90jer/booking-service:latest
    #container_name: booking-service
    pull_policy: always
    ports:
      - "8082:8082"
    depends_on:
      - discovery-server
      - postgres-booking
      - api-gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-booking:5432/booking_service_db
    volumes:
      - ./booking-service/src/main/resources/application-docker.yml:/application-docker.yml

  postgres-booking:
    image: postgres:latest
    #container_name: postgres-booking
    environment:
      POSTGRES_DB: booking_service_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - pg_booking:/var/lib/postgresql/data
    restart: unless-stopped

  property-service:
    image: 90jer/property-service:latest
    #container_name: property-service
    pull_policy: always
    ports:
      - "8081:8081"
    depends_on:
      - discovery-server
      - postgres-property
      - api-gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-property:5432/property_service_db
    volumes:
      - ./property-service/src/main/resources/application-docker.yml:/application-docker.yml

  postgres-property:
    image: postgres:latest
    #container_name: postgres-property
    environment:
      POSTGRES_DB: property_service_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5434:5432"
    volumes:
      - pg_property:/var/lib/postgresql/data
    restart: unless-stopped

  review-service:
    image: 90jer/review-service:latest
    #container_name: review-service
    pull_policy: always
    ports:
      - "8083:8083"
    depends_on:
      - discovery-server
      - postgres-review
      - api-gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-review:5432/review_service_db
    volumes:
      - ./review-service/src/main/resources/application-docker.yml:/application-docker.yml

  postgres-review:
    image: postgres:latest
    #container_name: postgres-review
    environment:
      POSTGRES_DB: review_service_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5435:5432"
    volumes:
      - pg_review:/var/lib/postgresql/data
    restart: unless-stopped

  user-service:
    image: 90jer/user-service:latest
    #container_name: user-service
    pull_policy: always
    ports:
      - "8084:8084"
    depends_on:
      - discovery-server
      - postgres-user
      - api-gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-user:5432/user_service_db
    volumes:
      - ./user-service/src/main/resources/application-docker.yml:/application-docker.yml

  postgres-user:
    image: postgres:latest
    #container_name: postgres-user
    environment:
      POSTGRES_DB: user_service_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5436:5432"
    volumes:
      - pg_user:/var/lib/postgresql/data
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    #container_name: zookeeper
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    #container_name: kafka
    hostname: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - 9092:9092
      - 29092:29092
    volumes:
      - ./kafka/kafka.properties:/etc/kafka/kafka.properties

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    #container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8086:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    #container_name: kafka-ui
    ports:
      - 8090:8080
    restart: always
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: PLAINTEXT://kafka:29092
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      - kafka

volumes:
  pg_booking:
  pg_property:
  pg_review:
  pg_user:
