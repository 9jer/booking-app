/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.bookingservice.event;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class BookingCreatedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3204164767113147111L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BookingCreatedEvent\",\"namespace\":\"com.example.bookingservice.event\",\"fields\":[{\"name\":\"bookingId\",\"type\":\"long\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"propertyName\",\"type\":\"string\"},{\"name\":\"checkInDate\",\"type\":\"string\"},{\"name\":\"checkOutDate\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BookingCreatedEvent> ENCODER =
      new BinaryMessageEncoder<BookingCreatedEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BookingCreatedEvent> DECODER =
      new BinaryMessageDecoder<BookingCreatedEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BookingCreatedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BookingCreatedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BookingCreatedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BookingCreatedEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BookingCreatedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BookingCreatedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BookingCreatedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BookingCreatedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long bookingId;
   private java.lang.CharSequence email;
   private java.lang.CharSequence propertyName;
   private java.lang.CharSequence checkInDate;
   private java.lang.CharSequence checkOutDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BookingCreatedEvent() {}

  /**
   * All-args constructor.
   * @param bookingId The new value for bookingId
   * @param email The new value for email
   * @param propertyName The new value for propertyName
   * @param checkInDate The new value for checkInDate
   * @param checkOutDate The new value for checkOutDate
   */
  public BookingCreatedEvent(java.lang.Long bookingId, java.lang.CharSequence email, java.lang.CharSequence propertyName, java.lang.CharSequence checkInDate, java.lang.CharSequence checkOutDate) {
    this.bookingId = bookingId;
    this.email = email;
    this.propertyName = propertyName;
    this.checkInDate = checkInDate;
    this.checkOutDate = checkOutDate;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return bookingId;
    case 1: return email;
    case 2: return propertyName;
    case 3: return checkInDate;
    case 4: return checkOutDate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: bookingId = (java.lang.Long)value$; break;
    case 1: email = (java.lang.CharSequence)value$; break;
    case 2: propertyName = (java.lang.CharSequence)value$; break;
    case 3: checkInDate = (java.lang.CharSequence)value$; break;
    case 4: checkOutDate = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'bookingId' field.
   * @return The value of the 'bookingId' field.
   */
  public long getBookingId() {
    return bookingId;
  }


  /**
   * Sets the value of the 'bookingId' field.
   * @param value the value to set.
   */
  public void setBookingId(long value) {
    this.bookingId = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'propertyName' field.
   * @return The value of the 'propertyName' field.
   */
  public java.lang.CharSequence getPropertyName() {
    return propertyName;
  }


  /**
   * Sets the value of the 'propertyName' field.
   * @param value the value to set.
   */
  public void setPropertyName(java.lang.CharSequence value) {
    this.propertyName = value;
  }

  /**
   * Gets the value of the 'checkInDate' field.
   * @return The value of the 'checkInDate' field.
   */
  public java.lang.CharSequence getCheckInDate() {
    return checkInDate;
  }


  /**
   * Sets the value of the 'checkInDate' field.
   * @param value the value to set.
   */
  public void setCheckInDate(java.lang.CharSequence value) {
    this.checkInDate = value;
  }

  /**
   * Gets the value of the 'checkOutDate' field.
   * @return The value of the 'checkOutDate' field.
   */
  public java.lang.CharSequence getCheckOutDate() {
    return checkOutDate;
  }


  /**
   * Sets the value of the 'checkOutDate' field.
   * @param value the value to set.
   */
  public void setCheckOutDate(java.lang.CharSequence value) {
    this.checkOutDate = value;
  }

  /**
   * Creates a new BookingCreatedEvent RecordBuilder.
   * @return A new BookingCreatedEvent RecordBuilder
   */
  public static com.example.bookingservice.event.BookingCreatedEvent.Builder newBuilder() {
    return new com.example.bookingservice.event.BookingCreatedEvent.Builder();
  }

  /**
   * Creates a new BookingCreatedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BookingCreatedEvent RecordBuilder
   */
  public static com.example.bookingservice.event.BookingCreatedEvent.Builder newBuilder(com.example.bookingservice.event.BookingCreatedEvent.Builder other) {
    if (other == null) {
      return new com.example.bookingservice.event.BookingCreatedEvent.Builder();
    } else {
      return new com.example.bookingservice.event.BookingCreatedEvent.Builder(other);
    }
  }

  /**
   * Creates a new BookingCreatedEvent RecordBuilder by copying an existing BookingCreatedEvent instance.
   * @param other The existing instance to copy.
   * @return A new BookingCreatedEvent RecordBuilder
   */
  public static com.example.bookingservice.event.BookingCreatedEvent.Builder newBuilder(com.example.bookingservice.event.BookingCreatedEvent other) {
    if (other == null) {
      return new com.example.bookingservice.event.BookingCreatedEvent.Builder();
    } else {
      return new com.example.bookingservice.event.BookingCreatedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for BookingCreatedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BookingCreatedEvent>
    implements org.apache.avro.data.RecordBuilder<BookingCreatedEvent> {

    private long bookingId;
    private java.lang.CharSequence email;
    private java.lang.CharSequence propertyName;
    private java.lang.CharSequence checkInDate;
    private java.lang.CharSequence checkOutDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.bookingservice.event.BookingCreatedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bookingId)) {
        this.bookingId = data().deepCopy(fields()[0].schema(), other.bookingId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.email)) {
        this.email = data().deepCopy(fields()[1].schema(), other.email);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.propertyName)) {
        this.propertyName = data().deepCopy(fields()[2].schema(), other.propertyName);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.checkInDate)) {
        this.checkInDate = data().deepCopy(fields()[3].schema(), other.checkInDate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.checkOutDate)) {
        this.checkOutDate = data().deepCopy(fields()[4].schema(), other.checkOutDate);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing BookingCreatedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.bookingservice.event.BookingCreatedEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.bookingId)) {
        this.bookingId = data().deepCopy(fields()[0].schema(), other.bookingId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.email)) {
        this.email = data().deepCopy(fields()[1].schema(), other.email);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.propertyName)) {
        this.propertyName = data().deepCopy(fields()[2].schema(), other.propertyName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.checkInDate)) {
        this.checkInDate = data().deepCopy(fields()[3].schema(), other.checkInDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.checkOutDate)) {
        this.checkOutDate = data().deepCopy(fields()[4].schema(), other.checkOutDate);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'bookingId' field.
      * @return The value.
      */
    public long getBookingId() {
      return bookingId;
    }


    /**
      * Sets the value of the 'bookingId' field.
      * @param value The value of 'bookingId'.
      * @return This builder.
      */
    public com.example.bookingservice.event.BookingCreatedEvent.Builder setBookingId(long value) {
      validate(fields()[0], value);
      this.bookingId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'bookingId' field has been set.
      * @return True if the 'bookingId' field has been set, false otherwise.
      */
    public boolean hasBookingId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'bookingId' field.
      * @return This builder.
      */
    public com.example.bookingservice.event.BookingCreatedEvent.Builder clearBookingId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.example.bookingservice.event.BookingCreatedEvent.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.email = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.example.bookingservice.event.BookingCreatedEvent.Builder clearEmail() {
      email = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'propertyName' field.
      * @return The value.
      */
    public java.lang.CharSequence getPropertyName() {
      return propertyName;
    }


    /**
      * Sets the value of the 'propertyName' field.
      * @param value The value of 'propertyName'.
      * @return This builder.
      */
    public com.example.bookingservice.event.BookingCreatedEvent.Builder setPropertyName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.propertyName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'propertyName' field has been set.
      * @return True if the 'propertyName' field has been set, false otherwise.
      */
    public boolean hasPropertyName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'propertyName' field.
      * @return This builder.
      */
    public com.example.bookingservice.event.BookingCreatedEvent.Builder clearPropertyName() {
      propertyName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'checkInDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getCheckInDate() {
      return checkInDate;
    }


    /**
      * Sets the value of the 'checkInDate' field.
      * @param value The value of 'checkInDate'.
      * @return This builder.
      */
    public com.example.bookingservice.event.BookingCreatedEvent.Builder setCheckInDate(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.checkInDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'checkInDate' field has been set.
      * @return True if the 'checkInDate' field has been set, false otherwise.
      */
    public boolean hasCheckInDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'checkInDate' field.
      * @return This builder.
      */
    public com.example.bookingservice.event.BookingCreatedEvent.Builder clearCheckInDate() {
      checkInDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'checkOutDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getCheckOutDate() {
      return checkOutDate;
    }


    /**
      * Sets the value of the 'checkOutDate' field.
      * @param value The value of 'checkOutDate'.
      * @return This builder.
      */
    public com.example.bookingservice.event.BookingCreatedEvent.Builder setCheckOutDate(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.checkOutDate = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'checkOutDate' field has been set.
      * @return True if the 'checkOutDate' field has been set, false otherwise.
      */
    public boolean hasCheckOutDate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'checkOutDate' field.
      * @return This builder.
      */
    public com.example.bookingservice.event.BookingCreatedEvent.Builder clearCheckOutDate() {
      checkOutDate = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BookingCreatedEvent build() {
      try {
        BookingCreatedEvent record = new BookingCreatedEvent();
        record.bookingId = fieldSetFlags()[0] ? this.bookingId : (java.lang.Long) defaultValue(fields()[0]);
        record.email = fieldSetFlags()[1] ? this.email : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.propertyName = fieldSetFlags()[2] ? this.propertyName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.checkInDate = fieldSetFlags()[3] ? this.checkInDate : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.checkOutDate = fieldSetFlags()[4] ? this.checkOutDate : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BookingCreatedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<BookingCreatedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BookingCreatedEvent>
    READER$ = (org.apache.avro.io.DatumReader<BookingCreatedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.bookingId);

    out.writeString(this.email);

    out.writeString(this.propertyName);

    out.writeString(this.checkInDate);

    out.writeString(this.checkOutDate);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.bookingId = in.readLong();

      this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);

      this.propertyName = in.readString(this.propertyName instanceof Utf8 ? (Utf8)this.propertyName : null);

      this.checkInDate = in.readString(this.checkInDate instanceof Utf8 ? (Utf8)this.checkInDate : null);

      this.checkOutDate = in.readString(this.checkOutDate instanceof Utf8 ? (Utf8)this.checkOutDate : null);

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.bookingId = in.readLong();
          break;

        case 1:
          this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);
          break;

        case 2:
          this.propertyName = in.readString(this.propertyName instanceof Utf8 ? (Utf8)this.propertyName : null);
          break;

        case 3:
          this.checkInDate = in.readString(this.checkInDate instanceof Utf8 ? (Utf8)this.checkInDate : null);
          break;

        case 4:
          this.checkOutDate = in.readString(this.checkOutDate instanceof Utf8 ? (Utf8)this.checkOutDate : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










